{"version":3,"sources":["src/app.js","src/environment.js","src/home.js","src/main.js","src/resources/index.js","src/services/async-http-client.js","src/services/fixtures.js","src/services/messages.js","src/services/twitter-service.js","src/viewmodels/login/login.js","src/viewmodels/logout/logout.js","src/viewmodels/newsfeed/newsfeed.js","src/viewmodels/profile/profile.js","src/viewmodels/search/search.js","src/viewmodels/signup/signup.js","src/viewmodels/tweetList/tweetList.js","C:/Users/kucko/WebstormProjects/DMAS/dmas-twitter-client/src/app.html","C:/Users/kucko/WebstormProjects/DMAS/dmas-twitter-client/src/home.html","C:/Users/kucko/WebstormProjects/DMAS/dmas-twitter-client/src/nav-bar.html","C:/Users/kucko/WebstormProjects/DMAS/dmas-twitter-client/src/viewmodels/login/login.html","C:/Users/kucko/WebstormProjects/DMAS/dmas-twitter-client/src/viewmodels/logout/logout.html","C:/Users/kucko/WebstormProjects/DMAS/dmas-twitter-client/src/viewmodels/newsfeed/newsfeed.html","C:/Users/kucko/WebstormProjects/DMAS/dmas-twitter-client/src/viewmodels/profile/profile.html","C:/Users/kucko/WebstormProjects/DMAS/dmas-twitter-client/src/viewmodels/search/search.html","C:/Users/kucko/WebstormProjects/DMAS/dmas-twitter-client/src/viewmodels/signup/signup.html","C:/Users/kucko/WebstormProjects/DMAS/dmas-twitter-client/src/viewmodels/tweetList/tweetList.html"],"names":["App","ts","au","ea","subscribe","msg","status","success","router","navigate","replace","trigger","setRoot","then","navigateToRoute","catch","console","log","error","configureRouter","config","map","route","name","moduleId","nav","title","mapUnknownRoutes","attached","isAuthenticated","debug","testing","Home","aurelia","configure","Promise","warnings","wForgottenReturn","use","standardConfiguration","feature","developmentLogging","plugin","start","AsyncHttpClient","httpClient","fixtures","http","withBaseUrl","baseUrl","get","url","post","obj","delete","authenticate","user","response","content","localStorage","twitter","JSON","stringify","configuration","withHeader","token","publish","message","authenticated","auth","parse","clearAuthentication","Fixtures","LoginStatus","Tweets","tweets","TwitterService","data","ac","users","comments","methods","getUsers","res","getTweets","publishTweets","getUserTweets","loggedInUser","_id","getTweetsByUser","getComments","updateUser","createTweet","tweet","resolve","reject","getUserInfo","getUserDetail","displayUser","search","keyword","deleteTweet","register","firstName","lastName","email","password","newUser","login","logout","undefined","Login","twitterService","prompt","e","Logout","Newsfeed","activate","u","date","Date","now","unshift","t","Profile","myRouter","d","deactivate","update","Search","that","pop","push","goToProfile","detailUser","find","Signup","TweetList","tweetToDelete","splice","indexOf"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;MAMaA,cAAAA,cADZ;AAGC,iBAAYC,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB,EAAwB;AAAA;;AAAA;;AACtB,WAAKD,EAAL,GAAUA,EAAV;AACA,WAAKD,EAAL,GAAUA,EAAV;AACAE,SAAGC,SAAH,wBAA0B,eAAO;AAC/B,YAAIC,IAAIC,MAAJ,CAAWC,OAAX,KAAuB,IAA3B,EAAiC;AAC/B,gBAAKC,MAAL,CAAYC,QAAZ,CAAqB,GAArB,EAA0B,EAACC,SAAS,IAAV,EAAgBC,SAAS,KAAzB,EAA1B;AACAT,aAAGU,OAAH,CAAW,MAAX,EAAmBC,IAAnB,CAAwB,YAAM;AAC5B,kBAAKL,MAAL,CAAYM,eAAZ,CAA4B,UAA5B;AACD,WAFD;AAGD,SALD,MAKM;AACJ,gBAAKN,MAAL,CAAYC,QAAZ,CAAqB,GAArB,EAA0B,EAACC,SAAS,IAAV,EAAgBC,SAAS,KAAzB,EAA1B;AACAT,aAAGU,OAAH,CAAW,KAAX,EAAkBC,IAAlB,CAAuB,YAAM;AAC3B,kBAAKL,MAAL,CAAYM,eAAZ,CAA4B,OAA5B;AACD,WAFD,EAEGC,KAFH,CAES,iBAAS;AAChBC,oBAAQC,GAAR,CAAYC,KAAZ;AACD,WAJD;AAKD;AACF,OAdD;AAeD;;kBAEDC,2CAAgBC,QAAQZ,QAAQ;AAC9BY,aAAOC,GAAP,CAAW,CACT,EAAEC,OAAO,CAAC,EAAD,EAAK,OAAL,CAAT,EAAwBC,MAAM,OAA9B,EAAuCC,UAAU,wBAAjD,EAA2EC,KAAK,IAAhF,EAAsFC,OAAO,OAA7F,EADS,EAET,EAAEJ,OAAO,QAAT,EAAmBC,MAAM,QAAzB,EAAmCC,UAAU,0BAA7C,EAAyEC,KAAK,IAA9E,EAAoFC,OAAO,QAA3F,EAFS,CAAX;;AAKAN,aAAOO,gBAAP,CAAwB,uBAAe;AACrC,eAAO,OAAP;AACD,OAFD;;AAIA,WAAKnB,MAAL,GAAcA,MAAd;AACD;;kBAEDoB,+BAAW;AAAA;;AACT,UAAI,KAAK3B,EAAL,CAAQ4B,eAAR,EAAJ,EAA+B;AAC7B,aAAK3B,EAAL,CAAQU,OAAR,CAAgB,MAAhB,EAAwBC,IAAxB,CAA6B,YAAM;AACjC,iBAAKL,MAAL,CAAYM,eAAZ,CAA4B,UAA5B;AACD,SAFD;AAGD;AACF;;;;;;;;;;;oBC/CY;AACbgB,WAAO,IADM;AAEbC,aAAS;AAFI;;;;;;;;;;;;;;;;;;MCGFC,eAAAA,eADZ;AAGC,kBAAY9B,EAAZ,EAAgB;AAAA;;AACd,WAAK+B,OAAL,GAAe/B,EAAf;AACD;;mBAEDiB,2CAAgBC,QAAQZ,QAAQ;AAC9BY,aAAOC,GAAP,CAAW,CACT,EAAEC,OAAO,CAAC,EAAD,EAAK,UAAL,CAAT,EAA2BC,MAAM,UAAjC,EAA6CC,UAAU,8BAAvD,EAAuFC,KAAK,IAA5F,EAAkGC,OAAO,UAAzG,EADS,EAET,EAAEJ,OAAO,SAAT,EAAoBC,MAAM,SAA1B,EAAqCC,UAAU,4BAA/C,EAA6EC,KAAK,IAAlF,EAAwFC,OAAO,SAA/F,EAFS,EAGT,EAAEJ,OAAO,QAAT,EAAmBC,MAAM,QAAzB,EAAmCC,UAAU,0BAA7C,EAAyEC,KAAK,IAA9E,EAAoFC,OAAO,QAA3F,EAHS,EAIT,EAAEJ,OAAO,QAAT,EAAmBC,MAAM,QAAzB,EAAmCC,UAAU,0BAA7C,EAAyEC,KAAK,IAA9E,EAAoFC,OAAO,QAA3F,EAJS,CAAX;;AAOAN,aAAOO,gBAAP,CAAwB,uBAAe;AACrC,eAAO,UAAP;AACD,OAFD;;AAIA,WAAKnB,MAAL,GAAcA,MAAd;AACD;;;;;;;;;;;UCZa0B,YAAAA;;;;;;;;;;AANhBC,UAAQf,MAAR,CAAe;AACbgB,cAAU;AACRC,wBAAkB;AADV;AADG,GAAf;;AAMO,WAASH,SAAT,CAAmBD,OAAnB,EAA4B;AACjCA,YAAQK,GAAR,CACGC,qBADH,GAEGC,OAFH,CAEW,WAFX;;AAIA,QAAI,sBAAYV,KAAhB,EAAuB;AACrBG,cAAQK,GAAR,CAAYG,kBAAZ;AACD;;AAED,QAAI,sBAAYV,OAAhB,EAAyB;AACvBE,cAAQK,GAAR,CAAYI,MAAZ,CAAmB,iBAAnB;AACD;;AAEDT,YAAQU,KAAR,GAAgB9B,IAAhB,CAAqB;AAAA,aAAMoB,QAAQrB,OAAR,EAAN;AAAA,KAArB;AACD;;;;;;;;UCxBesB,YAAAA;AAAT,WAASA,SAAT,CAAmBd,MAAnB,EAA2B,CAEjC;;;;;;;;;;;;;;;;;;;;;;;;;;MCKoBwB,0BADpB;AAGC,6BAAYC,UAAZ,EAAwBC,QAAxB,EAAkC3C,EAAlC,EAAqC;AAAA;;AACnC,WAAK4C,IAAL,GAAYF,UAAZ;AACA,WAAKE,IAAL,CAAUb,SAAV,CAAoB,gBAAQ;AAC1Ba,aAAKC,WAAL,CAAiBF,SAASG,OAA1B;AACD,OAFD;AAGA,WAAK9C,EAAL,GAAUA,EAAV;AACD;;8BAED+C,mBAAIC,KAAI;AACN,aAAO,KAAKJ,IAAL,CAAUG,GAAV,CAAcC,GAAd,CAAP;AACD;;8BAEDC,qBAAKD,KAAKE,KAAI;AACZ,aAAO,KAAKN,IAAL,CAAUK,IAAV,CAAeD,GAAf,EAAoBE,GAApB,CAAP;AACD;;8BAEDC,0BAAOH,KAAI;AACT,aAAO,KAAKJ,IAAL,CAAUO,MAAV,CAAiBH,GAAjB,CAAP;AACD;;8BAEDI,qCAAaJ,KAAKK,MAAM;AAAA;;AACtB,WAAKT,IAAL,CAAUK,IAAV,CAAeD,GAAf,EAAoBK,IAApB,EAA0B3C,IAA1B,CAA+B,oBAAY;AACzC,YAAMP,SAASmD,SAASC,OAAxB;AACA,YAAIpD,OAAOC,OAAX,EAAoB;AAClBoD,uBAAaC,OAAb,GAAuBC,KAAKC,SAAL,CAAeL,SAASC,OAAxB,CAAvB;AACA,gBAAKX,IAAL,CAAUb,SAAV,CAAoB,yBAAiB;AACnC6B,0BAAcC,UAAd,CAAyB,eAAzB,EAA0C,YAAYP,SAASC,OAAT,CAAiBO,KAAvE;AACD,WAFD;AAGD;AACD,cAAK9D,EAAL,CAAQ+D,OAAR,CAAgB,0BAAgB5D,MAAhB,CAAhB;AACD,OATD,EASGS,KATH,CASS,iBAAS;AAChB,YAAMT,SAAS;AACbC,mBAAS,KADI;AAEb4D,mBAAS;AAFI,SAAf;AAIA,cAAKhE,EAAL,CAAQ+D,OAAR,CAAgB,0BAAgB5D,MAAhB,CAAhB;AACD,OAfD;AAgBD;;8BAEDuB,6CAAkB;AAChB,UAAIuC,gBAAgB,KAApB;AACA,UAAIT,aAAaC,OAAb,KAAyB,MAA7B,EAAqC;AACnCQ,wBAAgB,IAAhB;AACA,aAAKrB,IAAL,CAAUb,SAAV,CAAoB,gBAAQ;AAC1B,cAAMmC,OAAOR,KAAKS,KAAL,CAAWX,aAAaC,OAAxB,CAAb;AACAb,eAAKiB,UAAL,CAAgB,eAAhB,EAAiC,YAAYK,KAAKJ,KAAlD;AACD,SAHD;AAID;AACD,aAAOG,aAAP;AACD;;8BAEDG,qDAAsB;AACpBZ,mBAAaC,OAAb,GAAuB,IAAvB;AACA,WAAKb,IAAL,CAAUb,SAAV,CAAoB,yBAAiB;AACnC6B,sBAAcC,UAAd,CAAyB,eAAzB,EAA0C,EAA1C;AACD,OAFD;AAGD;;;;oBA1DkBpB;;;;;;;;;;;;;;;MCPA4B;;;SAEnBvB,UAAU;;;oBAFSuB;;;;;;;;;;;;;;;MCARC,sBAAAA,cACX,qBAAYnE,MAAZ,EAAoB;AAAA;;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACD;;MAGUoE,iBAAAA,SACX,gBAAYC,MAAZ,EAAmB;AAAA;;AACjB,SAAKA,MAAL,GAAcA,MAAd;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCFkBC,yBADpB;AAOC,4BAAYC,IAAZ,EAAkB1E,EAAlB,EAAsB2E,EAAtB,EAA0B;AAAA;;AAAA,WAJ1BC,KAI0B,GAJlB,EAIkB;AAAA,WAH1BJ,MAG0B,GAHjB,EAGiB;AAAA,WAF1BK,QAE0B,GAFf,EAEe;;AACxB,WAAKC,OAAL,GAAeJ,KAAKI,OAApB;AACA,WAAK9E,EAAL,GAAUA,EAAV;AACA,WAAK2E,EAAL,GAAUA,EAAV;AACD;;6BAEDI,+BAAU;AAAA;;AACR,WAAKJ,EAAL,CAAQ5B,GAAR,CAAY,YAAZ,EAA0BrC,IAA1B,CAA+B,eAAO;AACpC,cAAKkE,KAAL,GAAaI,IAAIzB,OAAjB;AACD,OAFD;AAGD;;6BAED0B,iCAAW;AAAA;;AACT,WAAKN,EAAL,CAAQ5B,GAAR,CAAY,aAAZ,EAA2BrC,IAA3B,CAAgC,eAAO;AACrC,eAAK8D,MAAL,GAAcQ,IAAIzB,OAAlB;AACA,eAAK2B,aAAL;AACD,OAHD;AAID;;6BAEDC,yCAAe;AAAA;;AACb,WAAKR,EAAL,CAAQ5B,GAAR,CAAY,gBAAgB,KAAKqC,YAAL,CAAkBC,GAAlC,GAAwC,SAApD,EAA+D3E,IAA/D,CAAoE,eAAO;AACzE,eAAK8D,MAAL,GAAcQ,IAAIzB,OAAlB;AACA,eAAK2B,aAAL;AACD,OAHD;AAID;;6BAEDI,2CAAgBD,KAAI;AAAA;;AAClB,WAAKV,EAAL,CAAQ5B,GAAR,CAAY,gBAAgBsC,GAAhB,GAAsB,SAAlC,EAA6C3E,IAA7C,CAAkD,eAAO;AACvD,eAAK8D,MAAL,GAAcQ,IAAIzB,OAAlB;AACA,eAAK2B,aAAL;AACD,OAHD;AAID;;6BAEDK,qCAAa;AAAA;;AACX,WAAKZ,EAAL,CAAQ5B,GAAR,CAAY,eAAZ,EAA6BrC,IAA7B,CAAkC,eAAO;AACvC,eAAKmE,QAAL,GAAgBG,IAAIzB,OAApB;AACD,OAFD;AAGD;;6BAEDiC,iCAAWnC,MAAK;AAAA;;AACd,WAAKsB,EAAL,CAAQ1B,IAAR,CAAa,mBAAb,EAAkCI,IAAlC,EAAwC3C,IAAxC,CAA6C,eAAO;AAClD,eAAK0E,YAAL,GAAoBJ,IAAIzB,OAAxB;AACD,OAFD;AAGD;;6BAEDkC,mCAAYC,OAAM;AAAA;;AAChB,aAAO,IAAI1D,OAAJ,CAAY,UAAC2D,OAAD,EAAUC,MAAV,EAAqB;AACtC,eAAKjB,EAAL,CAAQ1B,IAAR,CAAa,aAAb,EAA4ByC,KAA5B,EAAmChF,IAAnC,CAAwC,eAAO;AAC7CiF,kBAAQX,IAAIzB,OAAZ;AACD,SAFD;AAGD,OAJM,CAAP;AAKD;;6BAEDsC,qCAAa;AAAA;;AACX,WAAKlB,EAAL,CAAQ5B,GAAR,CAAY,mBAAZ,EAAiCrC,IAAjC,CAAsC,eAAO;AAC3C,eAAK0E,YAAL,GAAoBJ,IAAIzB,OAAxB;AACD,OAFD;AAGD;;6BAEDuC,uCAAcT,KAAI;AAAA;;AAChB,WAAKV,EAAL,CAAQ5B,GAAR,CAAY,gBAAcsC,GAA1B,EAA+B3E,IAA/B,CAAoC,eAAO;AACzC,eAAKqF,WAAL,GAAmBf,IAAIzB,OAAvB;AACD,OAFD;AAGD;;6BAEDyC,yBAAOC,SAAQ;AAAA;;AACb,WAAKtB,EAAL,CAAQ1B,IAAR,CAAa,mBAAb,EAAkCgD,OAAlC,EAA2CvF,IAA3C,CAAgD,eAAO;AACrD,gBAAKkE,KAAL,GAAaI,IAAIzB,OAAjB;AACD,OAFD;AAGD;;6BAED2C,mCAAYb,KAAI;AACd,WAAKV,EAAL,CAAQxB,MAAR,CAAe,iBAAiBkC,GAAhC,EAAqC3E,IAArC,CAA0C,eAAO,CAEhD,CAFD;AAGD;;6BAEDyF,6BAASC,WAAWC,UAAUC,OAAOC,UAAU;AAC7C,UAAMC,UAAU;AACdJ,mBAAWA,SADG;AAEdC,kBAAUA,QAFI;AAGdC,eAAOA,KAHO;AAIdC,kBAAUA;AAJI,OAAhB;AAMA,WAAK5B,EAAL,CAAQ1B,IAAR,CAAa,YAAb,EAA2BuD,OAA3B;AACD;;6BAEDC,uBAAMH,OAAOC,UAAU;AACrB,UAAMlD,OAAO;AACXiD,eAAOA,KADI;AAEXC,kBAAUA;AAFC,OAAb;AAIA,WAAK5B,EAAL,CAAQvB,YAAR,CAAqB,yBAArB,EAAgDC,IAAhD;AACD;;6BAEDqD,2BAAS;AACP,UAAMvG,SAAS;AACbC,iBAAS,KADI;AAEb4D,iBAAS;AAFI,OAAf;AAIA,WAAKW,EAAL,CAAQP,mBAAR;AACA,WAAKpE,EAAL,CAAQ+D,OAAR,CAAgB,0BAAgB5D,MAAhB,CAAhB;AACA,WAAKiF,YAAL,GAAoBuB,SAApB;AACD;;6BAEDjF,6CAAkB;AAChB,aAAO,KAAKiD,EAAL,CAAQjD,eAAR,EAAP;AACD;;6BAEDwD,yCAAe;AACb,WAAKlF,EAAL,CAAQ+D,OAAR,CAAgB,qBAAW,KAAKS,MAAhB,CAAhB;AACD;;;;oBArHkBC;;;;;;;;;;;;;;;;;;;;;;;;;;MCHRmC,gBAAAA,gBADZ;AAMC,mBAAY9G,EAAZ,EAAgB;AAAA;;AAAA,WAHhBwG,KAGgB,GAHR,mBAGQ;AAAA,WAFhBC,QAEgB,GAFL,QAEK;;AACd,WAAKM,cAAL,GAAsB/G,EAAtB;AACA,WAAKgH,MAAL,GAAc,EAAd;AACD;;oBAEDL,uBAAMM,GAAG;AACP,WAAKF,cAAL,CAAoBJ,KAApB,CAA0B,KAAKH,KAA/B,EAAsC,KAAKC,QAA3C;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCZUS,iBAAAA,iBADZ;AAGC,oBAAYH,cAAZ,EAA4B;AAAA;;AAC1B,WAAKA,cAAL,GAAsBA,cAAtB;AACD;;qBAEDH,2BAAS;AACP,WAAKG,cAAL,CAAoBH,MAApB;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCRUO,mBAAAA,mBADZ;AAMC,sBAAYJ,cAAZ,EAA4B;AAAA;;AAAA,WAH5BtD,OAG4B,GAHlB,EAGkB;AAAA,WAF5BF,IAE4B,GAFrB,EAEqB;;AAC1B,WAAKwD,cAAL,GAAsBA,cAAtB;AACD;;uBAEDK,+BAAU;AAAA;;AACR,aAAO,IAAIlF,OAAJ,CAAY,UAAC2D,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAKiB,cAAL,CAAoB5B,SAApB;AACA,YAAI,MAAK4B,cAAL,CAAoBzB,YAApB,IAAoCuB,SAAxC,EAAkD;AAChD,gBAAKE,cAAL,CAAoBhB,WAApB;AACD;AACD,YAAIsB,IAAI,MAAKN,cAAL,CAAoBzB,YAA5B;AACAO,gBAAQwB,CAAR;AACD,OAPM,EAOJzG,IAPI,CAOC,aAAK;AACX,cAAK2C,IAAL,GAAY8D,CAAZ;AACD,OATM,CAAP;AAUD;;uBAED1B,qCAAa;AAAA;;AACX,UAAIC,QAAQ;AACVnC,iBAAS,KAAKA,OADJ;AAEV6D,cAAMC,KAAKC,GAAL;AAFI,OAAZ;AAIA,WAAKT,cAAL,CAAoBpB,WAApB,CAAgCC,KAAhC,EAAuChF,IAAvC,CAA4C,aAAK;AAC7C,eAAKmG,cAAL,CAAoBrC,MAApB,CAA2B+C,OAA3B,CAAmCC,CAAnC;AACH,OAFD;AAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MC7BUC,kBAAAA,kBADZ;AAOC,qBAAYZ,cAAZ,EAA4BxG,MAA5B,EAAmC;AAAA;;AAAA,WAJnCmE,MAImC,GAJ1B,EAI0B;AAAA,WAHnCY,YAGmC,GAHpB,EAGoB;AAAA,WAFnCW,WAEmC,GAFrB,EAEqB;;AACjC,WAAKc,cAAL,GAAsBA,cAAtB;AACA,WAAKa,QAAL,GAAgBrH,MAAhB;AACD;;sBAED6G,+BAAU;AAAA;;AACR,aAAO,IAAIlF,OAAJ,CAAY,UAAC2D,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIuB,IAAI,MAAKN,cAAL,CAAoBzB,YAA5B;AACA,YAAIuC,IAAI,MAAKd,cAAL,CAAoBd,WAA5B;AACA,YAAI4B,KAAKhB,SAAT,EAAmB;AACjB,gBAAKE,cAAL,CAAoB1B,aAApB;AACD,SAFD,MAEO,IAAIwC,EAAEtC,GAAF,IAAS,MAAKD,YAAL,CAAkBC,GAA/B,EAAmC;AACxC,gBAAKwB,cAAL,CAAoB1B,aAApB;AACD,SAFM,MAEA;AACL,gBAAK0B,cAAL,CAAoBvB,eAApB,CAAoCqC,EAAEtC,GAAtC;AACD;AACDM,gBAAQwB,CAAR;AACD,OAXM,EAWJzG,IAXI,CAWC,aAAK;AACX,cAAK0E,YAAL,GAAoB+B,CAApB;AACA,cAAKpB,WAAL,GAAmB,MAAKc,cAAL,CAAoBd,WAAvC;AACD,OAdM,CAAP;AAeD;;sBAED6B,mCAAY;AACV,WAAKf,cAAL,CAAoBd,WAApB,GAAkCY,SAAlC;AACD;;sBAEDkB,2BAAQ;AACN,WAAKhB,cAAL,CAAoBrB,UAApB,CAA+B,KAAKJ,YAApC;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MClCU0C,iBAAAA,iBADZ;AAMC,oBAAYjB,cAAZ,EAA4BxG,MAA5B,EAAoC;AAAA;;AAAA,WAHpCuE,KAGoC,GAH5B,EAG4B;AAAA,WAFpCqB,OAEoC,GAF1B,EAE0B;;AAClC,WAAKY,cAAL,GAAsBA,cAAtB;AACA,WAAKa,QAAL,GAAgBrH,MAAhB;AACD;;qBAED2F,2BAAS;AACP,WAAKa,cAAL,CAAoBb,MAApB,CAA2B,KAAKC,OAAhC;AACA,UAAI8B,OAAO,IAAX;AACA,2BAAc,KAAKnD,KAAnB,kHAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAAjBuC,EAAiB;;AACxB,aAAKvC,KAAL,CAAWoD,GAAX;AACD;AACD,UAAIb,IAAIY,KAAKlB,cAAL,CAAoBjC,KAA5B;AACA,4BAAiBuC,CAAjB,yHAAoB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAAX9D,IAAW;;AAClB0E,aAAKnD,KAAL,CAAWqD,IAAX,CAAgB5E,IAAhB;AACD;AAEF;;qBAED6E,mCAAY7C,KAAK;AACf,UAAI8C,aAAa,KAAKvD,KAAL,CAAWwD,IAAX,CAAgB,UAAU/E,IAAV,EAAgB;AAC/C,eAAOA,KAAKgC,GAAL,IAAYA,GAAnB;AACD,OAFgB,CAAjB;AAGA,WAAKwB,cAAL,CAAoBd,WAApB,GAAkCoC,UAAlC;AACA,WAAKT,QAAL,CAAcpH,QAAd,CAAuB,SAAvB;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MC/BU+H,iBAAAA,iBADZ;AAQC,oBAAYvI,EAAZ,EAAgB;AAAA;;AAAA,WALhBsG,SAKgB,GALJ,OAKI;AAAA,WAJhBC,QAIgB,GAJL,SAIK;AAAA,WAHhBC,KAGgB,GAHR,mBAGQ;AAAA,WAFhBC,QAEgB,GAFL,QAEK;;AACd,WAAKM,cAAL,GAAsB/G,EAAtB;AACD;;qBAEDqG,+BAAW;AACT,WAAKU,cAAL,CAAoBV,QAApB,CAA6B,KAAKC,SAAlC,EAA6C,KAAKC,QAAlD,EAA4D,KAAKC,KAAjE,EAAwE,KAAKC,QAA7E;AACA,WAAKM,cAAL,CAAoBJ,KAApB,CAA0B,KAAKH,KAA/B,EAAsC,KAAKC,QAA3C;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCZU+B,oBAAAA,oBADZ;AAMC,uBAAYxI,EAAZ,EAAgBE,EAAhB,EAAmB;AAAA;;AAAA;;AAAA,WAHnBwE,MAGmB,GAHV,EAGU;AAAA,WAFnBY,YAEmB,GAFJ,EAEI;;AACjB,WAAKtF,EAAL,GAAUA,EAAV;AACA,WAAKsF,YAAL,GAAoB,KAAKtF,EAAL,CAAQsF,YAA5B;AACApF,SAAGC,SAAH,mBAAqB,eAAO;AAC1B,6BAAc,MAAKuE,MAAnB,kHAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAAjBgD,CAAiB;;AACxB,gBAAKhD,MAAL,CAAYwD,GAAZ;AACD;AACD,8BAAkB9H,IAAIsE,MAAtB,yHAA6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAApBkB,KAAoB;;AAC3B,gBAAKlB,MAAL,CAAYyD,IAAZ,CAAiBvC,KAAjB;AACD;AACF,OAPD;AASD;;wBAEDvC,0BAAOkC,KAAI;AACT,WAAKvF,EAAL,CAAQoG,WAAR,CAAoBb,GAApB;AACA,UAAIkD,gBAAgB,KAAK/D,MAAL,CAAY4D,IAAZ,CAAiB,UAAS1C,KAAT,EAAe;AAClD,eAAOA,MAAML,GAAN,IAAaA,GAApB;AACD,OAFmB,CAApB;AAGA,WAAKb,MAAL,CAAYgE,MAAZ,CAAmB,KAAKhE,MAAL,CAAYiE,OAAZ,CAAoBF,aAApB,CAAnB,EAAuD,CAAvD;AACD;;;;;AC/BH;ACAA;ACAA;ACAA;ACAA;ACAA;ACAA;ACAA;ACAA;ACAA","file":"app-bundle.js","sourcesContent":["import {inject, Aurelia} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus} from './services/messages';\nimport TwitterService from './services/twitter-service';\n\n@inject(TwitterService, Aurelia, EventAggregator)\nexport class App {\n\n  constructor(ts, au, ea) {\n    this.au = au;\n    this.ts = ts;\n    ea.subscribe(LoginStatus, msg => {\n      if (msg.status.success === true) {\n        this.router.navigate('/', {replace: true, trigger: false});\n        au.setRoot('home').then(() => {\n          this.router.navigateToRoute('newsfeed');\n        });\n      } else{\n        this.router.navigate('/', {replace: true, trigger: false,});\n        au.setRoot('app').then(() => {\n          this.router.navigateToRoute('login');\n        }).catch(error => {\n          console.log(error);\n        });\n      }\n    });\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      { route: ['', 'login'], name: 'login', moduleId: 'viewmodels/login/login', nav: true, title: 'Login' },\n      { route: 'signup', name: 'signup', moduleId: 'viewmodels/signup/signup', nav: true, title: 'Signup' }\n    ]);\n\n    config.mapUnknownRoutes(instruction => {\n      return 'login';\n    });\n\n    this.router = router;\n  }\n\n  attached() {\n    if (this.ts.isAuthenticated()) {\n      this.au.setRoot('home').then(() => {\n        this.router.navigateToRoute('newsfeed');\n      });\n    }\n  }\n\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import { inject, Aurelia } from 'aurelia-framework';\n\n@inject(Aurelia)\nexport class Home {\n\n  constructor(au) {\n    this.aurelia = au;\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      { route: ['', 'newsfeed'], name: 'newsfeed', moduleId: 'viewmodels/newsfeed/newsfeed', nav: true, title: 'Newsfeed' },\n      { route: 'profile', name: 'profile', moduleId: 'viewmodels/profile/profile', nav: true, title: 'Profile'},\n      { route: 'search', name: 'search', moduleId: 'viewmodels/search/search', nav: true, title: 'Search' },\n      { route: 'logout', name: 'logout', moduleId: 'viewmodels/logout/logout', nav: true, title: 'Logout' }\n    ]);\n\n    config.mapUnknownRoutes(instruction => {\n      return 'newsfeed';\n    });\n\n    this.router = router;\n  }\n}\n","import environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","import {inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\nimport Fixtures from './fixtures';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus} from './messages';\n\n@inject(HttpClient, Fixtures, EventAggregator)\nexport default class AsyncHttpClient {\n\n  constructor(httpClient, fixtures, ea){\n    this.http = httpClient;\n    this.http.configure(http => {\n      http.withBaseUrl(fixtures.baseUrl);\n    });\n    this.ea = ea;\n  }\n\n  get(url){\n    return this.http.get(url);\n  }\n\n  post(url, obj){\n    return this.http.post(url, obj);\n  }\n\n  delete(url){\n    return this.http.delete(url);\n  }\n\n  authenticate(url, user) {\n    this.http.post(url, user).then(response => {\n      const status = response.content;\n      if (status.success) {\n        localStorage.twitter = JSON.stringify(response.content);\n        this.http.configure(configuration => {\n          configuration.withHeader('Authorization', 'bearer ' + response.content.token);\n        });\n      }\n      this.ea.publish(new LoginStatus(status));\n    }).catch(error => {\n      const status = {\n        success: false,\n        message: 'service not available'\n      };\n      this.ea.publish(new LoginStatus(status));\n    });\n  }\n\n  isAuthenticated() {\n    let authenticated = false;\n    if (localStorage.twitter !== 'null') {\n      authenticated = true;\n      this.http.configure(http => {\n        const auth = JSON.parse(localStorage.twitter);\n        http.withHeader('Authorization', 'bearer ' + auth.token);\n      });\n    }\n    return authenticated;\n  }\n\n  clearAuthentication() {\n    localStorage.twitter = null;\n    this.http.configure(configuration => {\n      configuration.withHeader('Authorization', '');\n    });\n  }\n\n}\n\n","export default class Fixtures {\n\n  baseUrl = 'https://rocky-ridge-20427.herokuapp.com';\n\n}\n","export class LoginStatus {\n  constructor(status) {\n    this.status = status;\n  }\n}\n\nexport class Tweets {\n  constructor(tweets){\n    this.tweets = tweets;\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport Fixtures from './fixtures';\nimport {Tweets, LoginStatus} from './messages';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport AsyncHttpClient from './async-http-client';\n\n@inject(Fixtures, EventAggregator, AsyncHttpClient)\nexport default class TwitterService {\n\n  users = [];\n  tweets = [];\n  comments = [];\n\n  constructor(data, ea, ac) {\n    this.methods = data.methods;\n    this.ea = ea;\n    this.ac = ac;\n  }\n\n  getUsers(){\n    this.ac.get('/api/users').then(res => {\n      this.users = res.content;\n    });\n  }\n\n  getTweets(){\n    this.ac.get('/api/tweets').then(res => {\n      this.tweets = res.content;\n      this.publishTweets();\n    });\n  }\n\n  getUserTweets(){\n    this.ac.get('/api/users/' + this.loggedInUser._id + '/tweets').then(res => {\n      this.tweets = res.content;\n      this.publishTweets();\n    });\n  }\n\n  getTweetsByUser(_id){\n    this.ac.get('/api/users/' + _id + '/tweets').then(res => {\n      this.tweets = res.content;\n      this.publishTweets();\n    })\n  }\n\n  getComments(){\n    this.ac.get('/api/comments').then(res => {\n      this.comments = res.content;\n    });\n  }\n\n  updateUser(user){\n    this.ac.post('/api/users/update', user).then(res => {\n      this.loggedInUser = res.content;\n    });\n  }\n\n  createTweet(tweet){\n    return new Promise((resolve, reject) => {\n      this.ac.post('/api/tweets', tweet).then(res => {\n        resolve(res.content);\n      });\n    })\n  }\n\n  getUserInfo(){\n    this.ac.get('/api/loggedInUser').then(res => {\n      this.loggedInUser = res.content;\n    });\n  }\n\n  getUserDetail(_id){\n    this.ac.get('/api/users/'+_id).then(res => {\n      this.displayUser = res.content;\n    })\n  }\n\n  search(keyword){\n    this.ac.post('/api/users/search', keyword).then(res => {\n      this.users = res.content;\n    });\n  }\n\n  deleteTweet(_id){\n    this.ac.delete('/api/tweets/' + _id).then(res => {\n\n    });\n  }\n\n  register(firstName, lastName, email, password) {\n    const newUser = {\n      firstName: firstName,\n      lastName: lastName,\n      email: email,\n      password: password\n    };\n    this.ac.post('/api/users', newUser);\n  }\n\n  login(email, password) {\n    const user = {\n      email: email,\n      password: password\n    };\n    this.ac.authenticate('/api/users/authenticate', user);\n  }\n\n  logout() {\n    const status = {\n      success: false,\n      message: ''\n    };\n    this.ac.clearAuthentication();\n    this.ea.publish(new LoginStatus(status));\n    this.loggedInUser = undefined;\n  }\n\n  isAuthenticated() {\n    return this.ac.isAuthenticated();\n  }\n\n  publishTweets(){\n    this.ea.publish(new Tweets(this.tweets));\n  }\n\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\n\n@inject(TwitterService)\nexport class Login {\n\n  email = 'marge@simpson.com';\n  password = 'secret';\n\n  constructor(ts) {\n    this.twitterService = ts;\n    this.prompt = '';\n  }\n\n  login(e) {\n    this.twitterService.login(this.email, this.password);\n  }\n}\n","import TwitterService from '../../services/twitter-service';\nimport {inject} from 'aurelia-framework';\n\n@inject(TwitterService)\nexport class Logout {\n\n  constructor(twitterService) {\n    this.twitterService = twitterService;\n  }\n\n  logout() {\n    this.twitterService.logout();\n  }\n}\n","import TwitterService from '../../services/twitter-service';\nimport {inject} from 'aurelia-framework';\n\n@inject(TwitterService)\nexport class Newsfeed {\n\n  content = \"\";\n  user = {};\n\n  constructor(twitterService) {\n    this.twitterService = twitterService;\n  }\n\n  activate(){\n    return new Promise((resolve, reject) => {\n      this.twitterService.getTweets();\n      if (this.twitterService.loggedInUser == undefined){\n        this.twitterService.getUserInfo();\n      }\n      let u = this.twitterService.loggedInUser;\n      resolve(u);\n    }).then(u => {\n      this.user = u;\n    });\n  }\n\n  createTweet(){\n    let tweet = {\n      content: this.content,\n      date: Date.now()\n    };\n    this.twitterService.createTweet(tweet).then(t => {\n        this.twitterService.tweets.unshift(t);\n    });\n  }\n\n}\n","import TwitterService from '../../services/twitter-service';\nimport {inject} from 'aurelia-framework';\nimport {Router} from 'aurelia-router';\n\n@inject(TwitterService, Router)\nexport class Profile {\n\n  tweets = [];\n  loggedInUser = {};\n  displayUser = {};\n\n  constructor(twitterService, router){\n    this.twitterService = twitterService;\n    this.myRouter = router;\n  }\n\n  activate(){\n    return new Promise((resolve, reject) => {\n      let u = this.twitterService.loggedInUser;\n      let d = this.twitterService.displayUser;\n      if (d == undefined){\n        this.twitterService.getUserTweets();\n      } else if (d._id == this.loggedInUser._id){\n        this.twitterService.getUserTweets();\n      } else {\n        this.twitterService.getTweetsByUser(d._id);\n      }\n      resolve(u);\n    }).then(u => {\n      this.loggedInUser = u;\n      this.displayUser = this.twitterService.displayUser;\n    });\n  }\n\n  deactivate(){\n    this.twitterService.displayUser = undefined;\n  }\n\n  update(){\n    this.twitterService.updateUser(this.loggedInUser);\n  }\n\n\n}\n","import TwitterService from '../../services/twitter-service';\nimport {inject} from 'aurelia-framework';\nimport {Router} from 'aurelia-router';\n\n\n@inject(TwitterService, Router)\nexport class Search {\n\n  users = [];\n  keyword = '';\n\n  constructor(twitterService, router) {\n    this.twitterService = twitterService;\n    this.myRouter = router;\n  }\n\n  search() {\n    this.twitterService.search(this.keyword);\n    let that = this;\n    for (let u of this.users) {\n      this.users.pop();\n    }\n    let u = that.twitterService.users;\n    for (let user of u) {\n      that.users.push(user);\n    }\n\n  }\n\n  goToProfile(_id) {\n    let detailUser = this.users.find(function (user) {\n      return user._id == _id;\n    });\n    this.twitterService.displayUser = detailUser;\n    this.myRouter.navigate(\"Profile\");\n  }\n\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\n\n@inject(TwitterService)\nexport class Signup {\n\n  firstName = 'Marge';\n  lastName = 'Simpson';\n  email = 'marge@simpson.com';\n  password = 'secret';\n\n  constructor(ts) {\n    this.twitterService = ts;\n  }\n\n  register() {\n    this.twitterService.register(this.firstName, this.lastName, this.email, this.password);\n    this.twitterService.login(this.email, this.password);\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport TwitterService from '../../services/twitter-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {Tweets} from '../../services/messages';\n\n@inject(TwitterService, EventAggregator)\nexport class TweetList{\n\n  tweets = [];\n  loggedInUser = {};\n\n  constructor(ts, ea){\n    this.ts = ts;\n    this.loggedInUser = this.ts.loggedInUser;\n    ea.subscribe(Tweets, msg => {\n      for (let t of this.tweets){\n        this.tweets.pop();\n      }\n      for (let tweet of msg.tweets){\n        this.tweets.push(tweet);\n      }\n    })\n\n  }\n\n  delete(_id){\n    this.ts.deleteTweet(_id);\n    let tweetToDelete = this.tweets.find(function(tweet){\n      return tweet._id == _id;\n    });\n    this.tweets.splice(this.tweets.indexOf(tweetToDelete), 1);\n  }\n\n}\n\n",null,null,null,null,null,null,null,null,null,null],"sourceRoot":"..\\src"}